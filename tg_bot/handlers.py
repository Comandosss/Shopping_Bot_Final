import os
from random import choice
from telegram import (
    ReplyKeyboardMarkup, ReplyKeyboardRemove, Update,
    InlineKeyboardMarkup, InlineKeyboardButton,
)
from telegram.ext import ConversationHandler, CallbackContext

from processing_qr_code.API_FNS.nalog_ru import NalogRuPython
from qr_code_scan_opencv.QR_to_string_openCV import read_qr_code
from processing_qr_code.receipt import treat_receipt
from settings_box import settings
from database import CRUD
from categorization.utils import json_func
from categorization.categorization import add_categories_to_receipt
from database.models import Receipt
from tg_bot.utils.keyboard import keyboard
from calc_debt.calc_debt import (calc_number_of_participants_for_receipt, create_dict_user_categories,
                                    create_dict_category_quantuty_users, calc_sum_of_categories, calculate_user_debt)


def greet_user(update: Update, context) -> int:
    """–ù–∞—á–∞–ª–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞."""
    reply_keyboard = [['–ü—Ä–∏–≤–µ—Ç üëã']]
    user_name = update.message.chat.first_name
    message = f'–ü—Ä–∏–≤–µ—Ç <b>{user_name}</b>!'
    update.message.reply_text(
        f'{message}', parse_mode='html',
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, resize_keyboard=True,
        ),
    )
    category_list = [3, 8, 9, 14]
    calculate_user_debt(2,category_list)

    return settings.MAIN_MENU


def main_menu(update: Update, context) -> int:
    """–ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    reply_keyboard = [
        ['–†–∞—Å—Ö–æ–¥—ã –ø–æ —á–µ–∫—É üí∞', '–£ –º–µ–Ω—è –µ—Å—Ç—å –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ üì¢'],
    ]

    update.message.reply_text(
        '–Ø –±–æ—Ç –¢–æ–ª—è–Ω ü§ñ.\n–Ø —É–º–µ—é —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å —Å–ø–∏—Å–∫–∏ –ø–æ–∫—É–ø–æ–∫ üõí'
        '\n–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—Ç—å —á–µ–∫–∏.üôé‚Äç‚ôÇÔ∏èüßæüë´',
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, resize_keyboard=True,
        ),
    )

    return settings.ACTIONS_WITH_THE_RECEIPT


def operations_with_receipt(update: Update, context) -> int:
    """–ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–µ–∫–∞–º–∏."""
    reply_keyboard = [
        ['–î–æ–±–∞–≤–∏—Ç—å —á–µ–∫ üÜï', '–ú–æ–∏ —á–µ–∫–∏ üìë'],
        ['–í–æ–∑–≤—Ä–∞—Ç –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é ‚Ü©Ô∏è'],
    ]
    update.message.reply_text(
        '–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é üîé',
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, resize_keyboard=True,
        ),
    )

    return settings.MENU_RECEIPT


def add_receipt(update: Update, context) -> int:
    """–ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –º–µ–Ω—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–µ–∫–∞."""
    reply_keyboard = [
        ['–í–æ–∑–≤—Ä–∞—Ç –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é ‚Ü©Ô∏è'],
    ]

    answer = choice(settings.BOT_ANSWERS)
    update.message.reply_text(
        f'{answer}',
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, resize_keyboard=True,
        ))

    return settings.ADD_CHECK


def check_user_photo(update: Update, context: CallbackContext) -> int:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–æ—Ç–æ –ø—Ä–∏—Å–ª–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —á–µ–∫–æ–º,
    –µ—Å–ª–∏ –¥–∞, —Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ content.user_data,
    –∏ –ø—Ä–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏—Å–ª–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
    """
    update.message.reply_text('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–æ—Ç–æ...')
    os.makedirs('tg_bot/downloads', exist_ok=True)
    photo_file = context.bot.getFile(update.message.photo[-1].file_id)
    file_name = os.path.join('tg_bot/downloads', f'{update.message.photo[-1].file_id}.jpg')
    photo_file.download(file_name)
    if read_qr_code(file_name):
        update.message.reply_text(
            '–û–±–Ω–∞—Ä—É–∂–µ–Ω —á–µ–∫, –¥–æ–±–∞–≤–ª—è—é —Ñ–æ—Ç–æ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É.',
        )
        os.makedirs('tg_bot/images', exist_ok=True)
        new_filename = os.path.join('tg_bot/images', f'check_{photo_file.file_id}.jpg')
        os.rename(file_name, new_filename)
        context.user_data['file_directory'] = new_filename
        update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä\n–≤ —Ñ–æ—Ä–º–∞—Ç–µ +79–•–•–•–•–•–•–•–•–•.')

        return settings.PHONE_NUMBER

    else:
        os.remove(file_name)
        update.message.reply_text('–ß–µ–∫ –Ω–∞ —Ñ–æ—Ç–æ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω.')


def operation_phone_number(update: Update, context: CallbackContext) -> int:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ content.user_data, –∑–∞—Ç–µ–º
    –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ –Ω–∞–ª–æ–≥–æ–≤—É—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞.
    """
    if len(update.message.text) != 12 or update.message.text[:2] != '+7' or not update.message.text[1:].isdigit():
        update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79–•–•–•–•–•–•–•–•–•.')

        return settings.PHONE_NUMBER

    phone = update.message.text
    context.user_data['phone'] = phone
    update.message.reply_text('–¢–µ–ª–µ—Ñ–æ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω.')
    phone = NalogRuPython(context.user_data.get('phone'))
    phone.sends_sms_to_the_user()
    update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ SMS.')
    
    return settings.CODE


def authorization_with_code(update: Update, context: CallbackContext) -> None:
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–¥ –∏–∑ —Å–º—Å –∏ –æ—Ç–ø—Ä–æ–≤–ª—è–µ—Ç –µ–≥–æ –≤ –Ω–∞–ª–æ–≥–æ–≤—É—é.
    """
    value = update.message.text
    phone = NalogRuPython(context.user_data.get('phone'), code=value)
    server_response = phone.sends_code_to_nalog()
    if server_response:
        string_from_qr = read_qr_code(context.user_data.get('file_directory'))
        receipt = phone.get_ticket(string_from_qr)
        phone.refresh_token_function()
        if CRUD.check_empty_table():
            list_of_ids = CRUD.add_category(json_func.read('categorization/categories.ini'))
            CRUD.add_triggers(json_func.read('categorization/categories.ini'), list_of_ids)
        processed_check = treat_receipt(receipt)
        last_receipt_id = CRUD.add_receipt(processed_check['seller'], update.message.chat.id)
        CRUD.add_receipt_content(add_categories_to_receipt(processed_check)['positions'], last_receipt_id)
        update.message.reply_text('–í–∞—à —á–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –∏ —Ä–∞—Å–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –≤ –º–µ–Ω—é "–ú–æ–∏ —á–µ–∫–∏"')
    else:
        update.message.reply_text('–í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ SMS.')


def my_receipts(update: Update, context) -> None:
    """
    –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –º–µ–Ω—é —Å –µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ —á–µ–∫–∞–º–∏.
    """
    context.user_data['counter'] = 0
    receipt_list = []
    for receipt in Receipt.query.filter(Receipt.user_id == update.message.chat.id):
        receipt_list.append([receipt.name, receipt.date_upload, receipt.id])
    if receipt_list:
        context.user_data['receipt_list'] = receipt_list
        receipt_info = context.user_data.get('receipt_list')
        text=(f'–ú–∞–≥–∞–∑–∏–Ω: {receipt_info[0][0]}'
                f'\n–î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ–∫–∞: {receipt_info[0][1]}'
                f'\n–ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {receipt_info[0][2]}')
        update.message.reply_text(
            text,
            reply_markup=keyboard()
        )

    else:
        update.message.reply_text('–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —á–µ–∫–æ–≤ üòî')


def next_receipt(update: Update, context) -> None:
    query = update.callback_query
    bot = context.bot
    receipt_info = context.user_data.get('receipt_list')
    counter = context.user_data.get('counter')
    counter += 1
    try:
        bot.edit_message_text(
            chat_id=query.message.chat_id,
            message_id=query.message.message_id,
            text=(f'–ú–∞–≥–∞–∑–∏–Ω: {receipt_info[counter][0]}'
                  f'\n–î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ–∫–∞: {receipt_info[counter][1]}'
                  f'\n–ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {receipt_info[counter][2]}'),
            reply_markup=keyboard()
        )
    except IndexError:
        counter = 0
        bot.edit_message_text(
            chat_id=query.message.chat_id,
            message_id=query.message.message_id,
            text=(f'–ú–∞–≥–∞–∑–∏–Ω: {receipt_info[counter][0]}'
                  f'\n–î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ–∫–∞: {receipt_info[counter][1]}'
                  f'\n–ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {receipt_info[counter][2]}'),
            reply_markup=keyboard()
        )

    context.user_data['counter'] = counter


def previous_receipt(update: Update, context) -> None:
    query = update.callback_query
    bot = context.bot
    receipt_info = context.user_data.get('receipt_list')
    counter = context.user_data.get('counter')
    counter -= 1
    try:
        bot.edit_message_text(
            chat_id=query.message.chat_id,
            message_id=query.message.message_id,
            text=(f'–ú–∞–≥–∞–∑–∏–Ω: {receipt_info[counter][0]}'
                  f'\n–î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ–∫–∞: {receipt_info[counter][1]}'
                  f'\n–ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {receipt_info[counter][2]}'),
            reply_markup=keyboard()
        )
    except IndexError:
        counter = len(receipt_info) - 1
        bot.edit_message_text(
            chat_id=query.message.chat_id,
            message_id=query.message.message_id,
            text=(f'–ú–∞–≥–∞–∑–∏–Ω: {receipt_info[counter][0]}'
                  f'\n–î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ–∫–∞: {receipt_info[counter][1]}'
                  f'\n–ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {receipt_info[counter][2]}'),
            reply_markup=keyboard()
        )

    context.user_data['counter'] = counter


def web_app(update: Update, context) -> None:
    reply_keyboard = [
        [InlineKeyboardButton('–í–ø–µ—Ä–µ–¥ –∫ –Ω–æ–≤—ã–º –ø–ª–∞—Ç–µ–∂–∞–º üöÄ', url='http://127.0.0.1:5000')],
    ]

    update.message.reply_text('P. Diddy –∑–∞ –≤–µ—á–µ—Ä —Ç—Ä–∞—Ç–∏–ª –¥–æ 3 –º–ª–Ω. $, –∞ —Ç—ã?', reply_markup=InlineKeyboardMarkup(
        reply_keyboard, resize_keyboard=True,
    ))


def cancel(update: Update, context) -> int:
    """–ó–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç –±–µ—Å–µ–¥—É."""
    update.message.reply_text(
        '–î–æ –í—Å—Ç—Ä–µ—á–∏!', reply_markup=ReplyKeyboardRemove()
    )
    
    return ConversationHandler.END
